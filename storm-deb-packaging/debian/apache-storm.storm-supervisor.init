#! /bin/bash

### BEGIN INIT INFO
# Provides:          storm-supervisor
# Required-Start:    $local_fs $remote_fs $network $syslog
# Required-Stop:     $local_fs $remote_fs $network $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: starts the storm supervisor server
# Description:       starts storm-supervisor using start-stop-daemon
### END INIT INFO

NAME="storm-supervisor"
DESC="storm supervisor"
STORM_USER="storm"
STORM_HOME="/usr/lib/storm"
PID="/var/run/storm-supervisor.pid"

# Include storm defaults if available
if [ -f /etc/default/storm ] ; then
    . /etc/default/storm
fi

if [ -f /etc/default/storm-supervisor ] ; then
    . /etc/default/storm-supervisor
fi

set -e

. /lib/lsb/init-functions

# Set STORM Options
STORM_CMD="/usr/bin/storm supervisor"

case "$1" in
  start)
    echo -n "Starting $DESC: "
    start-stop-daemon --start --background --pidfile ${PID} --make-pidfile --chuid ${STORM_USER} --chdir ${STORM_HOME} --exec ${STORM_CMD} || true
    echo "$NAME."
    ;;
  stop)
    echo -n "Stopping $DESC: "
    # well, well-written programms are taking care of their child processes to be killed when parent process receives kill signal.
    # but, the storm supervisor does it other way, so instead of just calling
    # start-stop-daemon --stop --pidfile ${PID} || true
    # we will have to apply a workaround to take care of all the child processes.
    kill -2 -- -$(($(ps -o pgid= -p $(cat ${PID}))))
    echo "$NAME."
    ;;
  restart)
    $0 stop
    # another work-around -> we should make sure that process is really stopped before proceeding. start-stop-daemon does that. (on parent process)
    sleep 1
    $0 start
    ;;
  status)
      status_of_proc -p ${PID} $NAME $NAME && exit 0 || exit $?
      ;;
  *)
    N=/etc/init.d/$NAME
    echo "Usage: $N {start|stop|restart|status}" >&2
    exit 1
    ;;
esac

exit 0
